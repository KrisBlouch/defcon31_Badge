 /*********
 Kris Blouch
 Code for running an oled, 6 buttons, and tilt switch to generate dice rolls
 Rolls Included: 20, 12, 10, 8, 6, 4
 Splash Screens added: jolly roger, d20, webflow
*********/
//libraries
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
//buttons

//Tilt Switch
#define TILT_INPUT_PIN 11

//Right Buttons
#define BUTTON_A_INPUT 9
#define BUTTON_B_INPUT 8
//D-Pad
#define BUTTON_UP_INPUT 1
#define BUTTON_DOWN_INPUT 3
#define BUTTON_LEFT_INPUT 0
#define BUTTON_RIGHT_INPUT 2
//var
int DICE_COUNT = 0;
int myPins[] = {4,6,8,20};
int PRESS_LEN_MILLI = 0;

  // this is the bitmap for JollyRoger, change this variable for your specification.
const unsigned char jollyRogerVar [] PROGMEM = 

{
  0x00, 0x07, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xe0, 0x00, 
	0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 
	0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 
	0x80, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xf8, 0x00, 0x01, 
	0xe0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfe, 0x00, 0x07, 
	0xf8, 0x01, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x80, 0x1f, 
	0xfe, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x7f, 
	0x7f, 0x8f, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xf1, 0xfe, 
	0x7f, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xfe, 
	0x3f, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xfc, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00, 0x07, 0xe0, 0x00, 0x01, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xc0, 0x07, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0x01, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xfc, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x80, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xf8, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x63, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc4, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0x87, 0xff, 0xff, 0xe0, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0x00, 0x7f, 0xfe, 0x00, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x3f, 0xfc, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x00, 0x1f, 0xf8, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x1f, 0xf8, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x7f, 0xfe, 0x00, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x03, 0xff, 0xff, 0xc0, 0x03, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xc0, 0x3f, 0xff, 0xff, 0xfc, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xc7, 0xff, 0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe3, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x07, 0xe3, 0xff, 0xff, 0xf9, 0x9f, 0xff, 0xff, 0xc7, 0xe0, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x1f, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xf8, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x7f, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0xfe, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x01, 0xff, 0xfc, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3f, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x1f, 0xff, 0xff, 0xff, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf8, 0x00, 
	0x01, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0x80, 
	0x07, 0xff, 0xff, 0xff, 0xff, 0xe1, 0xff, 0xff, 0xff, 0xff, 0x87, 0xff, 0xff, 0xff, 0xff, 0xe0, 
	0x1f, 0xff, 0xff, 0xff, 0xff, 0x83, 0xff, 0xff, 0xff, 0xff, 0xc1, 0xff, 0xff, 0xff, 0xff, 0xf0, 
	0x3f, 0xff, 0xff, 0xff, 0xfe, 0x03, 0xff, 0xbf, 0xfd, 0xff, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0xfc, 
	0x7f, 0xff, 0xff, 0xff, 0xf8, 0x01, 0xff, 0x9f, 0xf9, 0xff, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xfe, 
	0x7f, 0x8f, 0xff, 0xff, 0xe0, 0x00, 0xfe, 0x07, 0xe0, 0x7f, 0x00, 0x07, 0xff, 0xff, 0xe1, 0xfe, 
	0xfe, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0xc0, 0x7f, 
	0xf8, 0x00, 0xff, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xff, 0x00, 0x1f, 
	0xe0, 0x00, 0x7f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xfc, 0x00, 0x07, 
	0x00, 0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf8, 0x00, 0x00, 
	0x00, 0x00, 0x07, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xe0, 0x00, 0x00, 
	0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 
	0x00, 0x00, 0x0f, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 
	0x00, 0x00, 0x3f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xfc, 0x00, 0x00, 
	0x00, 0x00, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x00, 0x00, 
	0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xc0, 0x00, 
	0x00, 0x0f, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf0, 0x00
};

  // this is the d20splash bitmap
const unsigned char splashD20Var [] PROGMEM = 

{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xc0, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x80, 0x77, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x80, 0x39, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc7, 0x00, 0x18, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x0e, 0x00, 0x0c, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x1c, 0x00, 0x0e, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x38, 0x00, 0x07, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x30, 0x00, 0x03, 0x80, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x80, 0x60, 0x00, 0x01, 0xc0, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0xe0, 0x00, 0x00, 0xe0, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7c, 0x01, 0xc0, 0x00, 0x00, 0x70, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7e, 0x03, 0x80, 0x00, 0x00, 0x30, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0x87, 0x00, 0x00, 0x00, 0x18, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x63, 0xee, 0x00, 0x00, 0x00, 0x0d, 0xf3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x1f, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x1c, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x3e, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x36, 0x00, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x33, 0x00, 0x00, 0x00, 0x19, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x63, 0x80, 0x00, 0x00, 0x31, 0x83, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x61, 0x80, 0x00, 0x00, 0x71, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x61, 0xc0, 0x00, 0x00, 0x60, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0xc0, 0xc0, 0x00, 0x00, 0xe0, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0xc0, 0xe0, 0x00, 0x00, 0xc0, 0xc3, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0xc0, 0x60, 0x00, 0x01, 0x80, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x61, 0x80, 0x70, 0x00, 0x01, 0x80, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x61, 0x80, 0x70, 0x00, 0x01, 0x80, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x61, 0x80, 0x30, 0x00, 0x03, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x63, 0x80, 0x18, 0x00, 0x07, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x18, 0x00, 0x06, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x0c, 0x00, 0x0e, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x63, 0x00, 0x0e, 0x00, 0x0c, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x06, 0x00, 0x18, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x66, 0x00, 0x07, 0x00, 0x18, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x03, 0x00, 0x30, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x01, 0x80, 0x30, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x01, 0x80, 0x60, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0xc0, 0x60, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0xe0, 0xc0, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x61, 0xc0, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x71, 0x80, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x33, 0x80, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0x00, 0x1b, 0x00, 0x3f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xfe, 0x1e, 0x0f, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0xff, 0xff, 0xff, 0xc0, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x01, 0xff, 0xf0, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x00, 0x0c, 0x00, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x0c, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x0c, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x0c, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0x0c, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x0c, 0x07, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x0c, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x8c, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xec, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

  // this is the bitmap, change this variable for your specification.
const unsigned char splashWebflowVar [] PROGMEM = 

{
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x07, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x1f, 0xe7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x3f, 0xc7, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x3f, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x7e, 0x07, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x7c, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0x7c, 0x0f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0xc0, 0x03, 0x00, 0xc0, 0xfc, 0x07, 0xc7, 0xc0, 0xff, 0xcf, 0xc0, 0x3f, 0x02, 0x00, 0x18, 0x03, 
	0xf0, 0x0f, 0x03, 0xc3, 0xff, 0x07, 0xdf, 0xe1, 0xff, 0xcf, 0x80, 0xff, 0xc3, 0x80, 0x78, 0x0e, 
	0xf8, 0x1f, 0x07, 0xc7, 0xff, 0x8f, 0xff, 0xf3, 0xff, 0x8f, 0x81, 0xff, 0xe3, 0xc0, 0xfc, 0x1e, 
	0x78, 0x3f, 0x07, 0x8f, 0xff, 0x8f, 0xff, 0xf3, 0xff, 0x0f, 0x83, 0xff, 0xe3, 0xe0, 0xfc, 0x3e, 
	0x7c, 0x7f, 0x0f, 0x9f, 0x8f, 0x8f, 0xf3, 0xf0, 0xfc, 0x0f, 0x87, 0xe3, 0xf3, 0xe1, 0xfc, 0x3c, 
	0x7c, 0x7f, 0x0f, 0x1f, 0x0f, 0x8f, 0xe1, 0xf8, 0xfc, 0x0f, 0x8f, 0xc3, 0xf1, 0xe1, 0xfc, 0x7c, 
	0x7c, 0x7f, 0x9f, 0x3e, 0x1f, 0x8f, 0xc1, 0xf8, 0xfc, 0x1f, 0x8f, 0x81, 0xf1, 0xf3, 0xfc, 0x78, 
	0x7c, 0xff, 0x9f, 0x3f, 0xff, 0x8f, 0xc1, 0xf8, 0xf8, 0x1f, 0x8f, 0x81, 0xf1, 0xf3, 0xfc, 0x78, 
	0x7c, 0xf7, 0x9e, 0x3f, 0xfe, 0x0f, 0x81, 0xf0, 0xf8, 0x1f, 0x9f, 0x81, 0xf1, 0xf7, 0xbc, 0xf8, 
	0x3c, 0xe7, 0xbe, 0x7f, 0xfc, 0x0f, 0x81, 0xf0, 0xf8, 0x1f, 0x1f, 0x81, 0xf1, 0xf7, 0xbc, 0xf0, 
	0x3d, 0xe7, 0xbc, 0x7f, 0xc0, 0x1f, 0x81, 0xf0, 0xf8, 0x1f, 0x1f, 0x83, 0xf1, 0xf7, 0xbe, 0xf0, 
	0x3d, 0xe7, 0xbc, 0x7e, 0x00, 0x1f, 0x83, 0xf0, 0xf8, 0x1f, 0x1f, 0x83, 0xf0, 0xff, 0x1f, 0xe0, 
	0x3f, 0xc7, 0xf8, 0x7e, 0x00, 0x1f, 0x83, 0xe1, 0xf8, 0x1f, 0x1f, 0x83, 0xe0, 0xff, 0x1f, 0xe0, 
	0x3f, 0xc7, 0xf8, 0x3f, 0x06, 0x1f, 0x07, 0xe1, 0xf8, 0x1f, 0x1f, 0x87, 0xe0, 0xfe, 0x1f, 0xe0, 
	0x3f, 0x87, 0xf8, 0x3f, 0xff, 0x9f, 0xdf, 0xc1, 0xf8, 0x3f, 0x0f, 0xdf, 0xc0, 0xfe, 0x1f, 0xc0, 
	0x1f, 0x83, 0xf0, 0x1f, 0xff, 0x1f, 0xff, 0xc1, 0xf0, 0x3e, 0x0f, 0xff, 0x80, 0xfc, 0x1f, 0x80, 
	0x1f, 0x03, 0xe0, 0x0f, 0xfe, 0x1f, 0xff, 0x81, 0xf0, 0x3e, 0x07, 0xff, 0x00, 0xf8, 0x1f, 0x80, 
	0x1e, 0x03, 0xc0, 0x07, 0xfc, 0x1c, 0xfe, 0x01, 0xf0, 0x3c, 0x03, 0xfe, 0x00, 0xf0, 0x1e, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x10, 0x01, 0xf0, 0x3c, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xf0, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

//screen stuff
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//variables
int dice20 = 0;
int dice4 = 0;
int dice6 = 0;
int dice8 = 0;
int dice10 = 0;
int dice12 = 0;
int funct1 = 0;


//string diceSpace = "  ";

//functions

void D20();

void setup() {
//  pinMode(LED_PIN, OUTPUT);
  pinMode(TILT_INPUT_PIN, INPUT);
 // pinMode(TILT_HOT, OUTPUT);
  pinMode(BUTTON_A_INPUT, INPUT);
  pinMode(BUTTON_B_INPUT, INPUT);
 // digitalWrite(TILT_HOT, HIGH);
  Serial.begin(9600);
  //Serial.begin(115200);

  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) { // Address 0x3D for 128x64
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }
  //delay(2000);
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  // Display static text
  //dice20 = random(1,20);
  display.println("  DEFCON31");
  display.setTextSize(3);
  display.println("PUSH    BUTTON");
  display.display();
  delay(3000);

}

void loop() {
  
  while(true) {
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }
  }
  
  
  while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    pickD20();
  }
  while(true) {
    if(digitalRead(TILT_INPUT_PIN) == 0) {
      rollD20();
    }
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }

  }  
while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    pickD4();
  }
  while(true) {
    if(digitalRead(TILT_INPUT_PIN) == 0) {
      rollD4();
    }
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }

  }    
while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    pickD6();
  }
  while(true) {
    if(digitalRead(TILT_INPUT_PIN) == 0) {
      rollD6();
    }
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }

  }  
while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    pickD8();
  }
  while(true) {
    if(digitalRead(TILT_INPUT_PIN) == 0) {
      rollD8();
    }
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }

  }  

 
  while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    pickD10();
  }

  while(true) {
    if(digitalRead(TILT_INPUT_PIN) == 0) {
      rollD10();
    }
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }
 
  while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    pickD12();
  }
  while(true) {
    if(digitalRead(TILT_INPUT_PIN) == 0) {
      rollD12();
    }
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }
  }
  }

  while(true) {
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }
  }
  while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    jollyRoger();
  }

  while(true) {
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }
  }
  while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    splashD20();
  }
  while(true) {
    if(digitalRead(BUTTON_A_INPUT) == HIGH) {
      break;
    }
  }
  while(digitalRead(BUTTON_A_INPUT) == HIGH) {
    delay(100);
    PRESS_LEN_MILLI = PRESS_LEN_MILLI + 100;
  }

  if(PRESS_LEN_MILLI > 100); {
    DICE_COUNT = DICE_COUNT + 1;
    splashWebflow();
  }


}

  

  //if(digitalRead(BUTTON_PIN) == HIGH && digitalRead(BUTTON2_PIN) == HIGH)
    //break;
      //pickD4();
  
      

//functions:
  void rollD20(){
    dice20 = random(1,20);
    display.clearDisplay();
    display.setTextSize(6);
    display.setTextColor(WHITE);
    display.setCursor(0, 16);
  // Display static text
    dice20 = random(1,20);
    //diceSpace = "  ";
    display.print(" ");
    display.println(dice20);
    display.display(); 
    Serial.println(dice20);
    delay(3000);
  }

    void rollD4(){
    dice4 = random(1,4);
    display.clearDisplay();
    display.setTextSize(6);
    display.setTextColor(WHITE);
    display.setCursor(0, 16);
  // Display static text
    //diceSpace = "  ";
    display.print(" ");
    display.println(dice4);
    display.display(); 
    Serial.println(dice4);
    delay(3000);
  }

    void rollD6(){
    dice6 = random(1,6);
    display.clearDisplay();
    display.setTextSize(6);
    display.setTextColor(WHITE);
    display.setCursor(0, 16);
  // Display static text
    //diceSpace = "  ";
    display.print(" ");
    display.println(dice6);
    display.display(); 
    Serial.println(dice6);
    delay(3000);
  }

    void rollD8(){
    dice8 = random(1,8);
    display.clearDisplay();
    display.setTextSize(6);
    display.setTextColor(WHITE);
    display.setCursor(0, 16);
  // Display static text
    //diceSpace = "  ";
    display.print(" ");
    display.println(dice8);
    display.display(); 
    Serial.println(dice8);
    delay(3000);
  }

     void rollD10(){
    dice10 = random(1,10);
    display.clearDisplay();
    display.setTextSize(6);
    display.setTextColor(WHITE);
    display.setCursor(0, 16);
  // Display static text
    //diceSpace = "  ";
    display.print(" ");
    display.println(dice10);
    display.display(); 
    Serial.println(dice10);
    delay(3000);
  }

     void rollD12(){
    dice12 = random(1,12);
    display.clearDisplay();
    display.setTextSize(6);
    display.setTextColor(WHITE);
    display.setCursor(0, 16);
  // Display static text
    //diceSpace = "  ";
    display.print(" ");
    display.println(dice12);
    display.display(); 
    Serial.println(dice12);
    delay(3000);
  }

  //selectDiceFunctions

  void pickD20(){
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(" Pick Die");
    display.setCursor(0, 16);
  // Display next Line
    display.setTextSize(5);
    display.println("D20");
    display.display(); 
  }

    void pickD4(){
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(" Pick Die");
    display.setCursor(0, 16);
  // Display next Line
    display.setTextSize(5);
    display.println("D4");
    display.display(); 
  }

    void pickD6(){
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(" Pick Die");
    display.setCursor(0, 16);
  // Display next Line
    display.setTextSize(5);
    display.println("D6");
    display.display(); 
  }

    void pickD8(){
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(" Pick Die");
    display.setCursor(0, 16);
  // Display next Line
    display.setTextSize(5);
    display.println("D8");
    display.display(); 
  }

   void pickD10(){
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(" Pick Die");
    display.setCursor(0, 16);
  // Display next Line
    display.setTextSize(5);
    display.println("D10");
    display.display(); 
  }

 void pickD12(){
    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(WHITE);
    display.setCursor(0,0);
    display.println(" Pick Die");
    display.setCursor(0, 16);
  // Display next Line
    display.setTextSize(5);
    display.println("D12");
    display.display(); 
  }




void jollyRoger(){
    display.clearDisplay();
    display.drawBitmap(0, 0, jollyRogerVar, 128, 64, WHITE);
    display.display();
}

void splashD20(){
    display.clearDisplay();
    display.drawBitmap(0, 0, splashD20Var, 128, 64, WHITE);
    display.display();
}

void splashWebflow(){
    display.clearDisplay();
    display.drawBitmap(0, 0, splashWebflowVar, 128, 64, WHITE);
    display.display();
}

